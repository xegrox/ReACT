@page
@using ReACT.Helpers
@model ReACT.Areas.User.Pages.Forest
@{
    var trees = ViewData["trees"] as List<ForestTree> ?? new List<ForestTree>();
    var width = ViewData["width"] as int? ?? 0;
    var height = ViewData["height"] as int? ?? 0;
    var checkpoints = ViewData["checkpoints"] as List<int> ?? new List<int>();

    // Calculate progress
    var pEndIndex = checkpoints.FindIndex(c => c > trees.Count);
    var pStartC = checkpoints[Math.Max(pEndIndex - 1, 0)];
    var pEndC = checkpoints[pEndIndex];
    var progress = (double) (trees.Count - pStartC) / (pEndC - pStartC);
}

<div id="content-root" class="w-full h-full overflow-hidden">
    <div id="panzoom" class="relative">
        <canvas id="bg-canvas" class="absolute"></canvas>
        <canvas id="canvas" class="absolute"></canvas>
        <div id="capture-events" class="absolute w-full h-full"></div>
    </div>
    <div class="h-[40rem] absolute flex right-0 top-1/2 -translate-y-1/2" x-data="{open: false, tree: null}" x-on:show-tree.document="open = true; tree = $event.detail" x-on:hide-sidebar.document="open = false">
        <div class="w-8 bg-base-300 rounded-l-3xl cursor-pointer flex transition-opacity" x-on:click="open = !open" :class="open || 'opacity-60'">
            <i class="ph-caret-left-bold m-auto transition-transform" :class="open && 'rotate-180'"></i>
        </div>
        <div class="flex-1 bg-base-200 overflow-hidden transition-[width]" :class="open ? 'w-96' : 'w-0'" x-init="$watch('open', o => {if (!o) $transEnd(() => tree = null)})">
            <div x-show="tree" class="p-5 space-y-5 w-96">
                <div class="flex space-x-4 items-center h-10">
                    <button class="btn btn-ghost btn-circle btn-sm" x-on:click="tree = null">
                        <i class="ph-arrow-left-bold text-lg"></i>
                    </button>
                    <p class="text-lg font-semibold">Details</p>
                </div>
                <div class="rounded-lg bg-base-300 bg-opacity-60 flex justify-center h-36">
                    <canvas width="100" height="100" x-on:show-tree.document="simpleRenderTree($el, $event.detail)">
                    </canvas>
                </div>
                <div class="pl-2 text-base-content/80">
                    <p x-text="tree?.data.name" class="font-semibold text-xl mb-1"></p>
                    <p class="text-sm" x-text="`Planted ${tree?.data.dateStr} | Recycled ${tree?.data.recycledKg}kg`"></p>
                </div>
            </div>
            <div x-show="!tree" class="p-5 w-96">
                <div class="h-10 flex items-center">
                    <p class="text-lg font-semibold">Timeline</p>
                </div>
                <div class="space-y-7 text-sm mt-5 relative pb-7">
                    <div id="progress-bg" class="mt-1 absolute w-1 h-full flex flex-col left-0 -translate-x-1/2 bg-primary">
                        <div class="relative">
                            <div id="progress-fg" class="absolute w-full bg-base-200/80">
                                <div id="progress" class="bg-primary w-full"></div>
                            </div>
                        </div>
                    </div>
                    @foreach (var c in checkpoints)
                    {
                        <div class="flex pl-4 relative">
                            @if (c <= trees.Count)
                            {
                                var tree = trees[c - 1];
                                <div id="c-@c" class="z-10 w-3 h-3 rounded-full bg-primary absolute left-0 -translate-x-1/2 top-1/2 -translate-y-1/2"></div>
                                <p class="mr-auto">@c.OrdinalString() tree planted @tree.Date.RelativeString()</p>
                                <p class="text-base-content/80">@tree.Date.ToString("dd/MM/yy")</p>
                            }
                            else
                            {
                                <div id="c-@c" class="w-3 h-3 rounded-full bg-base-200 border-2 border-primary box-border absolute left-0 -translate-x-1/2 top-1/2 -translate-y-1/2"></div>
                                <p class="mr-auto">@c.OrdinalString() tree to be planted</p>
                            }
                        </div>
                    }
                    <div class="absolute w-[105%] h-5 -bottom-1 right-0 bg-gradient-to-b from-transparent to-base-200"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let simpleRenderTree

let startC = document.getElementById("c-@pStartC")
let endC = document.getElementById("c-@pEndC")
let progressFg = document.getElementById("progress-fg")
let progressBg = document.getElementById("progress-bg")
let progress = document.getElementById("progress")

let parentBounds = progressBg.getBoundingClientRect()
let progressTop = startC.getBoundingClientRect().bottom
let progressBottom = endC.getBoundingClientRect().top 
progressFg.style.top = progressTop - parentBounds.top + "px"
progressFg.style.height = parentBounds.bottom - progressTop + "px"
progress.style.height = @progress * (progressBottom - progressTop) + "px"
</script>

<script type="module">
import RiveCanvas from "/lib/rive-app/canvas-advanced/canvas_advanced.mjs"

const rive = await RiveCanvas({
    locateFile: (_) => '/lib/rive-app/canvas-advanced/rive.wasm'
});

class TreeInstanceData {
    constructor(artboard, x, y, data) {
        this.data = data
        this.artboard = artboard
        this.machine = new rive.StateMachineInstance(
            artboard.stateMachineByName("default"),
            artboard
        )
        this.x = x
        this.y = y
        this.width = 100
        this.height = 100
    }
}

function configureDimens() {
    const root = document.getElementById("content-root")
    for (let el of [
        document.getElementById("panzoom"),
        document.getElementById("bg-canvas"),
        document.getElementById("canvas")
    ]) {
        el.width = Math.max(@width, root.offsetWidth + 500)
        el.height = Math.max(@height, root.offsetHeight + 500)
        el.style.width = `${Math.max(@width, root.offsetWidth + 500)}px`
        el.style.height = `${Math.max(@height, root.offsetHeight + 500)}px`
        el.dispatchEvent(new Event("redraw"))
    }
}

function setupPanzoom() {
    const elem = document.getElementById("panzoom")
    console.log((elem.width - elem.parentElement.offsetWidth)/2)
    const panzoom = Panzoom(elem, {
        contain: "outside",
        
        startX: -(elem.width - elem.parentElement.offsetWidth)/2,
        startY: -(elem.height - elem.parentElement.offsetHeight)/2
    })
    elem.parentElement.addEventListener('wheel', event => {
        if (!event.ctrlKey) return
        panzoom.zoomWithWheel(event)
    })
}

function fillPattern(canvas, img, w, h) {
    const ctx = canvas.getContext("2d")
    ctx.drawImage(img, 0, 0, w,  h)
    while (w < canvas.width) {
        ctx.drawImage(canvas, w,  0)
        w <<= 1
    }
    while (h < canvas.height) {
        ctx.drawImage(canvas, 0, h)
        h <<= 1
    }
    ctx.fillStyle = "rgba(0, 0, 0, 0.2)"
    ctx.fillRect(0, 0, canvas.width, canvas.height)
}

function renderBg() {
    const canvas = document.getElementById("bg-canvas")
    const img = new Image()
    img.src = "/images/grass.png"
    img.addEventListener('load', () => {
        fillPattern(canvas, img, 150, 150)
        canvas.addEventListener("redraw", () => fillPattern(canvas, img, 150, 150))
    })
}

function renderFg(trees) {
    const canvas = document.getElementById("canvas");
    const renderer = rive.makeRenderer(canvas)
    
    let lastTime = 0
    function draw(time) {
        if (!lastTime) lastTime = time
        const elapsedTimeSec = (time - lastTime) / 1000
        lastTime = time
        
        renderer.clear()
        
        trees.forEach(tree => {
            const { artboard, machine, x, y } = tree
            renderer.save()
            renderer.translate(x+canvas.width/2-50, y+canvas.height/2-50)
            renderer.align(
                rive.Fit.contain,
                rive.Alignment.center,
                {
                    minX: 0,
                    minY: 0,
                    maxX: tree.width,
                    maxY: tree.height
                },
                artboard.bounds
            );
            name
            machine.advance(elapsedTimeSec)
            artboard.advance(elapsedTimeSec)
            artboard.draw(renderer)
            renderer.restore()
        })
        rive.requestAnimationFrame(draw)
    }
    rive.requestAnimationFrame(draw)
}

async function fetchTrees() {
    const bytes = await (await fetch(new Request("/images/rive/sapling.riv"))).arrayBuffer()
    const file = await rive.load(new Uint8Array(bytes))
    const trees = new Set()
    
    @foreach (var tree in trees)
    {
        <text>
        trees.add(new TreeInstanceData(
            file.defaultArtboard(),
            @tree.X,
            @tree.Y,
            {
                name: "Oak Sapling",
                dateStr: "@tree.Date.ToString("dd/MM/yyyy")",
                recycledKg: @tree.RecycledKg
            }
        ))
        </text>
    }
    
    return trees
}

function configureEvents(trees) {
    let elem = document.getElementById("capture-events")
    let width = elem.offsetWidth
    let height = elem.offsetHeight
    let sx, sy
    elem.addEventListener("mousemove", (e) => {sx = e.pageX; sy = e.pageY})
    elem.addEventListener("click", (e) => {
        if (e.target !== elem) return
        let dx = Math.abs(sx - e.pageX)
        let dy = Math.abs(sy - e.pageY)
        if (dx && dy) return
        elem.dispatchEvent(new CustomEvent("hide-sidebar", {bubbles: true}))
    })
    trees.forEach(tree => {
        let a = document.createElement('a')
        a.style.height = tree.height + "px"
        a.style.width = tree.width + "px"
        a.style.position = "absolute"
        a.style.top = tree.y + height/2 - tree.height/2 + "px"
        a.style.left = tree.x + width/2 - tree.width/2 + "px"
        a.style.cursor = "pointer"
        a.addEventListener("click", () => {
            a.dispatchEvent(new CustomEvent("show-tree", {bubbles: true, detail: tree}))
        })
        elem.appendChild(a)
    })
}

async function main() {
    configureDimens()
    window.addEventListener("resize", configureDimens)
    setupPanzoom()
    
    let trees = await fetchTrees()
    
    renderBg()
    renderFg(trees)
    configureEvents(trees)
}

main()

simpleRenderTree = (canvas, tree) => {
    if (tree === null) return
    const { artboard, machine } = tree
    let renderer = rive.makeRenderer(canvas);
    let lastTime = 0
    function draw(time) {
        if (!lastTime) lastTime = time
        const elapsedTimeSec = (time - lastTime) / 1000
        lastTime = time
        renderer.clear()
        renderer.save()
        renderer.align(
            rive.Fit.contain,
            rive.Alignment.center,
            {
                minX: 0,
                minY: 0,
                maxX: canvas.width,
                maxY: canvas.height
            },
            artboard.bounds
        )
        machine.advance(elapsedTimeSec)
        artboard.advance(elapsedTimeSec)
        artboard.draw(renderer)
        renderer.restore()
        rive.requestAnimationFrame(draw)
    }
    rive.requestAnimationFrame(draw)
}
</script>